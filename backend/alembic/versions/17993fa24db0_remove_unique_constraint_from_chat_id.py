"""Remove unique constraint from chat_id

Revision ID: 17993fa24db0
Revises: 
Create Date: 2025-07-20 15:39:49.906788

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '17993fa24db0'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # First, check if the index exists before trying to drop it
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    
    # Check and drop document_comparisons table if it exists
    if inspector.has_table('document_comparisons'):
        if inspector.has_index('document_comparisons', 'ix_document_comparisons_id'):
            op.drop_index(op.f('ix_document_comparisons_id'), table_name='document_comparisons')
        op.drop_table('document_comparisons')
    
    # Drop dependent tables first with CASCADE to handle foreign key constraints
    for table_name in ['pdf_comparisons', 'documents', 'chat_messages']:
        if inspector.has_table(table_name):
            op.execute(f'DROP TABLE IF EXISTS {table_name} CASCADE')
    
    # Now drop chat_sessions table with CASCADE
    if inspector.has_table('chat_sessions'):
        op.execute('DROP TABLE IF EXISTS chat_sessions CASCADE')
    
    # Check and drop uploaded_documents table if it exists
    if inspector.has_table('uploaded_documents'):
        if inspector.has_index('uploaded_documents', 'ix_uploaded_documents_id'):
            op.drop_index(op.f('ix_uploaded_documents_id'), table_name='uploaded_documents')
        op.drop_table('uploaded_documents')
    
    # We'll handle chat_messages table recreation in a later migration
    # since we're dropping it above
    
    # These tables should exist if we have quote_interactions
    if inspector.has_table('quote_interactions'):
        op.alter_column('quote_interactions', 'user_id',
                   existing_type=sa.INTEGER(),
                   nullable=False)
        op.alter_column('quote_interactions', 'quai_id',
                   existing_type=sa.VARCHAR(length=8),
                   nullable=False)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('quote_interactions', 'quai_id',
               existing_type=sa.VARCHAR(length=8),
               nullable=True)
    op.alter_column('quote_interactions', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_chat_messages_chat_id'), table_name='chat_messages')
    op.create_index(op.f('ix_chat_messages_chat_id'), 'chat_messages', ['chat_id'], unique=True)
    op.create_table('uploaded_documents',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('uploaded_documents_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quai_id', sa.VARCHAR(length=8), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('extracted_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('extracted_tables', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('upload_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['quai_id'], ['users.quai_id'], name='uploaded_documents_quai_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='uploaded_documents_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='uploaded_documents_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_uploaded_documents_id'), 'uploaded_documents', ['id'], unique=False)
    op.create_table('chat_sessions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('chat_sessions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('chat_sessions_pkey'))
    )
    op.create_index(op.f('ix_chat_sessions_session_id'), 'chat_sessions', ['session_id'], unique=True)
    op.create_index(op.f('ix_chat_sessions_id'), 'chat_sessions', ['id'], unique=False)
    op.create_table('document_comparisons',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quai_id', sa.VARCHAR(length=8), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('chat_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('estimation_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('comparison_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('similarity_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mismatch_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('comparison_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['uploaded_documents.id'], name=op.f('document_comparisons_document_id_fkey')),
    sa.ForeignKeyConstraint(['quai_id'], ['users.quai_id'], name=op.f('document_comparisons_quai_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('document_comparisons_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('document_comparisons_pkey'))
    )
    op.create_index(op.f('ix_document_comparisons_id'), 'document_comparisons', ['id'], unique=False)
    # ### end Alembic commands ###
