"""add_chat_sessions_table

Revision ID: e74d54a3c583
Revises: 17993fa24db0
Create Date: 2025-07-20 15:47:45.735326

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e74d54a3c583'
down_revision: Union[str, Sequence[str], None] = '17993fa24db0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create the chat_sessions table if it doesn't exist
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    
    # Only create chat_sessions table if it doesn't exist
    if not inspector.has_table('chat_sessions'):
        op.create_table('chat_sessions',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('quai_id', sa.String(length=8), nullable=False),
            sa.Column('title', sa.String(length=100), nullable=False, server_default='New Chat'),
            sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
            sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='chat_sessions_user_id_fkey'),
            sa.ForeignKeyConstraint(['quai_id'], ['users.quai_id'], name='chat_sessions_quai_id_fkey'),
            sa.PrimaryKeyConstraint('id')
        )
    
    # Only proceed if chat_messages table exists
    if inspector.has_table('chat_messages'):
        # Add session_id column if it doesn't exist
        columns = [col['name'] for col in inspector.get_columns('chat_messages')]
        if 'session_id' not in columns:
            op.add_column('chat_messages', sa.Column('session_id', sa.Integer(), nullable=True))
            
            # Create default session for existing messages
            op.execute("""
                INSERT INTO chat_sessions (user_id, quai_id, title, created_at, updated_at)
                SELECT DISTINCT user_id, quai_id, 'Previous Chats', MIN(timestamp), MIN(timestamp)
                FROM chat_messages
                WHERE user_id IS NOT NULL AND quai_id IS NOT NULL
                GROUP BY user_id, quai_id
            """)
            
            # Assign existing messages to sessions
            op.execute("""
                UPDATE chat_messages cm
                SET session_id = cs.id
                FROM chat_sessions cs
                WHERE cm.user_id = cs.user_id AND cm.quai_id = cs.quai_id
                AND cm.session_id IS NULL
            """)
    
    # Now make session_id non-nullable
    op.alter_column('chat_messages', 'session_id', nullable=False)
    
    op.create_foreign_key('chat_messages_session_id_fkey', 'chat_messages', 'chat_sessions', ['session_id'], ['id'])
    op.drop_column('chat_messages', 'chat_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('chat_messages', sa.Column('chat_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'chat_messages', type_='foreignkey')
    op.create_index(op.f('ix_chat_messages_chat_id'), 'chat_messages', ['chat_id'], unique=False)
    op.drop_column('chat_messages', 'session_id')
    # ### end Alembic commands ###
